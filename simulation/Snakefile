#/home-1/cnaechy1@jhu.edu/miniconda3/bin/python3.7
import os
import pandas as pd

configfile: "hg38_1kg.yaml"

''' Load from config '''
CHROM = config['CHROM']
INDIV = config['INDIV']
GROUP = config['GROUP']
NUM_SIM_READS = config['NUM_SIM_READS']
ALN_MAPQ_THRSD = config['ALN_MAPQ_THRSD']
BIAS_MIN_READ_COUNT = config['BIAS_MIN_READ_COUNT']
BIAS_TAIL_THRDS = config['BIAS_TAIL_THRDS']

#: paths
DIR = config['DIR']
SIMULATION_REF = config['SIMULATION_REF']
SOURCE_REF = config['SOURCE_REF']
TARGET_REF = config['TARGET_REF']
PHASED_VCF = config['PHASED_VCF']
FAMILY = config['FAMILY']
SPOP = config['SPOP']
LENGTH_MAP = config['LENGTH_MAP']
CHROM_MAP = config['CHROM_MAP']

#: path of tools used
BOWTIE2 = config['BOWTIE2']
BWA = config['BWA']
BCFTOOLS = config['BCFTOOLS']
SAMTOOLS = config['SAMTOOLS']
MASON2 = config['MASON2']
LIFTOVER = config['LIFTOVER']
PYTHON = config['PYTHON']
DIR_SCRIPTS = config['DIR_SCRIPTS']
TIME = config['TIME']

#: system settings
THREADS = config['THREADS']
MAX_SYSTEM_THREADS = config['MAX_SYSTEM_THREADS']
RAND_SEED = config['RAND_SEED']
''''''

PHASED_VCF_F = os.path.join(DIR, CHROM + '_phased_filt.vcf')

# PREFIX_MAJOR_F = os.path.join(DIR, 'major/chr' + CHROM + '-filtered_major')
# PREFIX_MAJOR = os.path.join(DIR, 'major/chr' + CHROM + '-major')
# PREFIX_MAJOR_IDX = os.path.join(DIR, 'major/indexes/chr' + CHROM + '-major')
# DIR_MAJOR = os.path.join(DIR, 'major/')

# DIR_GRC = os.path.join(DIR, 'grc/')
DIR_IDX = os.path.join(DIR, 'indexes/')

DIR_PER = os.path.join(DIR, 'simulation/{INDIV}/')
DIR_PER_IDX = os.path.join(DIR, 'simulation/{INDIV}/indexes/')
PREFIX_PER = os.path.join(DIR, 'simulation/{INDIV}/' + 'chr{}-per'.format(CHROM))

DIR_FIRST_PASS = os.path.join(DIR, 'experiments/{INDIV}/')
DIR_RESULTS = os.path.join(DIR, 'results/')
DIR_RESULTS_BIAS = os.path.join(DIR, 'results/bias/')

IDX_ITEMS = ['1', '2', '3', '4', 'rev.1', 'rev.2']

''' Included rules '''
#: Functions needed in the pipeline
include: 'shared/functions.Snakefile'

#: Build major allele ref and its indexes
#:      check: 'index.done'
include: 'shared/index.Snakefile'

#: Simulate reads from personalized genomes
#:      check: 'simulation.done'
include: 'shared/simulated_reads.Snakefile'

# #: Align all reads to the standard genomes (one-pass)
# #:      check: 'alignment.done'
include: 'shared/align.Snakefile'
# 
# #: Split reads by MAPQ and align low-quality reads to pop genomes
# #:      check: 'refflow_secondpass.done'
# include: 'shared/align_refflow.Snakefile'
# 
# #: Liftover sams for major and refflow
# #:      check: 'liftover.done', 'sorting.done'
# include: 'shared/liftover.Snakefile'
# 
# #: Calculate allelic bias
# #:      check: 'refbias.done', 'find_biased_reads.done'
# include: 'shared/calc_refbias.Snakefile'
# 
# #: Calculate mapping accuracy and
# #: summarize all results into a tsv
# #:      check: 'accuracy.done'
# include: 'shared/calc_mapping_acc.Snakefile'
# 
# #: Rules to analyze results, not belong to standard pipeline
# #:      check: 'analysis.done'
# include: 'shared/analysis.Snakefile'

rule all:
    input:
        index = os.path.join(DIR, 'index.done'),
        sim = os.path.join(DIR, 'simulation.done'),
        alignment = os.path.join(DIR, 'alignment.done'),
        #: second pass alignment (refflow)
        # secondpass = os.path.join(DIR, 'refflow_secondpass.done'),
        # #: liftover and sorting
        # # lft = os.path.join(DIR, 'liftover.done'),
        # sort = os.path.join(DIR, 'sorting.done'),
        # #: refbias
        # refbias = os.path.join(DIR, 'refbias.done'),
        # # find_biased_reads = os.path.join(DIR, 'find_biased_reads.done'),
        # # #: accuracy
        # # acc = os.path.join(DIR, 'accuracy.done'),
        # # tsv = os.path.join(DIR_RESULTS, 'all.tsv'),
        # #: analysis
        # analysis = os.path.join(DIR, 'analysis.done')
    run:
        sys.stderr.write('complete\n')

# rule filter_phased_vcf:
#     input:
#         vcf = PHASED_VCF,
#         chrom_map = CHROM_MAP
#     output:
#         vcf = PHASED_VCF_F
#     shell:
#         '{BCFTOOLS} view -V mnps,other -c 1 -f PASS -O v {input.vcf} | \ '
#         '{BCFTOOLS} norm -d all | {BCFTOOLS} annotate --rename-chrs {input.chrom_map} -o {output.vcf}'
